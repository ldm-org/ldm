// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetRepoMetadataData, GetRepoMetadataResponse, GetRepoMetadataError, GetResolvedRepoVersionData, GetResolvedRepoVersionResponse, GetResolvedRepoVersionError, GetRepoVersionMetadataData, GetRepoVersionMetadataResponse, GetRepoVersionMetadataError, GetPackageMetadataData, GetPackageMetadataResponse, GetPackageMetadataError, GetScopedPackageMetadataData, GetScopedPackageMetadataResponse, GetScopedPackageMetadataError, GetResolvedPackageVersionData, GetResolvedPackageVersionResponse, GetResolvedPackageVersionError, GetResolvedScopedPackageVersionData, GetResolvedScopedPackageVersionResponse, GetResolvedScopedPackageVersionError, GetPackageVersionMetadataData, GetPackageVersionMetadataResponse, GetPackageVersionMetadataError, GetScopedPackageVersionMetadataData, GetScopedPackageVersionMetadataResponse, GetScopedPackageVersionMetadataError, GetPackageVersionEntrypointsData, GetPackageVersionEntrypointsResponse, GetPackageVersionEntrypointsError, GetScopedPackageVersionEntrypointsData, GetScopedPackageVersionEntrypointsResponse, GetScopedPackageVersionEntrypointsError, ListStatsPeriodsData, ListStatsPeriodsResponse, ListTopPackagesData, ListTopPackagesResponse, ListTopPackagesError, GetRepoStatsData, GetRepoStatsResponse, GetRepoStatsError, ListTopRepoVersionsData, ListTopRepoVersionsResponse, ListTopRepoVersionsError, GetRepoVersionStatsData, GetRepoVersionStatsResponse, GetRepoVersionStatsError, ListTopRepoVersionFilesData, ListTopRepoVersionFilesResponse, ListTopRepoVersionFilesError, GetRepoBadgeData, GetRepoBadgeResponse, GetRepoBadgeError, GetPackageStatsData, GetPackageStatsResponse, GetPackageStatsError, GetScopedPackageStatsData, GetScopedPackageStatsResponse, GetScopedPackageStatsError, ListTopPackageVersionsData, ListTopPackageVersionsResponse, ListTopPackageVersionsError, ListTopScopedPackageVersionsData, ListTopScopedPackageVersionsResponse, ListTopScopedPackageVersionsError, GetPackageVersionStatsData, GetPackageVersionStatsResponse, GetPackageVersionStatsError, GetScopedPackageVersionStatsData, GetScopedPackageVersionStatsResponse, GetScopedPackageVersionStatsError, ListTopPackageVersionFilesData, ListTopPackageVersionFilesResponse, ListTopPackageVersionFilesError, ListTopScopedPackageVersionFilesData, ListTopScopedPackageVersionFilesResponse, ListTopScopedPackageVersionFilesError, GetPackageBadgeData, GetPackageBadgeResponse, GetPackageBadgeError, GetScopedPackageBadgeData, GetScopedPackageBadgeResponse, GetScopedPackageBadgeError, GetNetworkStatsData, GetNetworkStatsResponse, GetNetworkStatsError, GetNetworkContentStatsData, GetNetworkContentStatsResponse, GetNetworkCountriesStatsData, GetNetworkCountriesStatsResponse, GetNetworkCountriesStatsError, ListTopBrowsersData, ListTopBrowsersResponse, ListTopBrowsersError, ListTopBrowsersVersionsData, ListTopBrowsersVersionsResponse, ListTopBrowsersVersionsError, ListTopBrowserCountriesData, ListTopBrowserCountriesResponse, ListTopBrowserCountriesError, ListTopBrowserPlatformsData, ListTopBrowserPlatformsResponse, ListTopBrowserPlatformsError, ListTopBrowserVersionsData, ListTopBrowserVersionsResponse, ListTopBrowserVersionsError, ListTopBrowserVersionCountriesData, ListTopBrowserVersionCountriesResponse, ListTopBrowserVersionCountriesError, ListTopPlatformsData, ListTopPlatformsResponse, ListTopPlatformsError, ListTopPlatformsVersionsData, ListTopPlatformsVersionsResponse, ListTopPlatformsVersionsError, ListTopPlatformBrowsersData, ListTopPlatformBrowsersResponse, ListTopPlatformBrowsersError, ListTopPlatformCountriesData, ListTopPlatformCountriesResponse, ListTopPlatformCountriesError, ListTopPlatformVersionsData, ListTopPlatformVersionsResponse, ListTopPlatformVersionsError, ListTopPlatformVersionCountriesData, ListTopPlatformVersionCountriesResponse, ListTopPlatformVersionCountriesError, GetProxyStatsData, GetProxyStatsResponse, GetProxyStatsError, ListTopProxyFilesData, ListTopProxyFilesResponse, ListTopProxyFilesError, LookupFileHashData, LookupFileHashResponse, LookupFileHashError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Get repo metadata
 * Returns a list of versions for the repository and links to related resources.
 * The versions are sorted in descending order using [`v-compare`](https://www.npmjs.com/package/v-compare).
 *
 */
export const getRepoMetadata = <ThrowOnError extends boolean = false>(options: Options<GetRepoMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoMetadataResponse, GetRepoMetadataError, ThrowOnError>({
        url: '/v1/packages/gh/{user}/{repo}',
        ...options
    });
};

/**
 * Get a resolved version from a range or a tag
 * Returns the latest version matching `specifier` or `null` if there is no matching version.
 * Only valid [semver](https://semver.org/) versions are considered.
 * Stable versions are prioritized over pre-releases.
 *
 */
export const getResolvedRepoVersion = <ThrowOnError extends boolean = false>(options: Options<GetResolvedRepoVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResolvedRepoVersionResponse, GetResolvedRepoVersionError, ThrowOnError>({
        url: '/v1/packages/gh/{user}/{repo}/resolved',
        ...options
    });
};

/**
 * Get version metadata
 * Returns the default file and a list of all files in this version.
 * An error is returned if the package size exceeds 50 MB.
 *
 */
export const getRepoVersionMetadata = <ThrowOnError extends boolean = false>(options: Options<GetRepoVersionMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoVersionMetadataResponse, GetRepoVersionMetadataError, ThrowOnError>({
        url: '/v1/packages/gh/{user}/{repo}@{version}',
        ...options
    });
};

/**
 * Get package metadata
 * Returns a list of tags and versions for the package and links to related resources.
 * The versions are sorted in descending order using [`semver`](https://www.npmjs.com/package/semver).
 *
 */
export const getPackageMetadata = <ThrowOnError extends boolean = false>(options: Options<GetPackageMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageMetadataResponse, GetPackageMetadataError, ThrowOnError>({
        url: '/v1/packages/npm/{package}',
        ...options
    });
};

/**
 * Get package metadata (scoped)
 * Returns a list of tags and versions for the package and links to related resources.
 * The versions are sorted in descending order using [`semver`](https://www.npmjs.com/package/semver).
 *
 */
export const getScopedPackageMetadata = <ThrowOnError extends boolean = false>(options: Options<GetScopedPackageMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScopedPackageMetadataResponse, GetScopedPackageMetadataError, ThrowOnError>({
        url: '/v1/packages/npm/@{scope}/{package}',
        ...options
    });
};

/**
 * Get a resolved version from a range or a tag
 * Returns the latest version matching `specifier` or `null` if there is no matching version.
 * Non-deprecated versions are prioritized over deprecated ones,
 * and stable versions are prioritized over pre-releases.
 *
 */
export const getResolvedPackageVersion = <ThrowOnError extends boolean = false>(options: Options<GetResolvedPackageVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResolvedPackageVersionResponse, GetResolvedPackageVersionError, ThrowOnError>({
        url: '/v1/packages/npm/{package}/resolved',
        ...options
    });
};

/**
 * Get a resolved version from a range or a tag (scoped)
 * Returns the latest version matching `specifier` or `null` if there is no matching version.
 * Non-deprecated versions are prioritized over deprecated ones,
 * and stable versions are prioritized over pre-releases.
 *
 */
export const getResolvedScopedPackageVersion = <ThrowOnError extends boolean = false>(options: Options<GetResolvedScopedPackageVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResolvedScopedPackageVersionResponse, GetResolvedScopedPackageVersionError, ThrowOnError>({
        url: '/v1/packages/npm/@{scope}/{package}/resolved',
        ...options
    });
};

/**
 * Get version metadata
 * Returns the default file and a list of all files in this version.
 * An error is returned if the package size exceeds 100 MB.
 *
 */
export const getPackageVersionMetadata = <ThrowOnError extends boolean = false>(options: Options<GetPackageVersionMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageVersionMetadataResponse, GetPackageVersionMetadataError, ThrowOnError>({
        url: '/v1/packages/npm/{package}@{version}',
        ...options
    });
};

/**
 * Get version metadata (scoped)
 * Returns the default file and a list of all files in this version.
 * An error is returned if the package size exceeds 100 MB.
 *
 */
export const getScopedPackageVersionMetadata = <ThrowOnError extends boolean = false>(options: Options<GetScopedPackageVersionMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScopedPackageVersionMetadataResponse, GetScopedPackageVersionMetadataError, ThrowOnError>({
        url: '/v1/packages/npm/@{scope}/{package}@{version}',
        ...options
    });
};

/**
 * Get version entry points
 * Returns the recommended files to use from this package based on package metadata and additional heuristics.
 * The response includes one file of each supported type (js, css), if available.
 * The output may change over time as our algorithm improves.
 *
 */
export const getPackageVersionEntrypoints = <ThrowOnError extends boolean = false>(options: Options<GetPackageVersionEntrypointsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageVersionEntrypointsResponse, GetPackageVersionEntrypointsError, ThrowOnError>({
        url: '/v1/packages/npm/{package}@{version}/entrypoints',
        ...options
    });
};

/**
 * Get version entry points (scoped)
 * Returns the recommended files to use from this package based on package metadata and additional heuristics.
 * The response includes one file of each supported type (js, css), if available.
 * The output may change over time as our algorithm improves.
 *
 */
export const getScopedPackageVersionEntrypoints = <ThrowOnError extends boolean = false>(options: Options<GetScopedPackageVersionEntrypointsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScopedPackageVersionEntrypointsResponse, GetScopedPackageVersionEntrypointsError, ThrowOnError>({
        url: '/v1/packages/npm/@{scope}/{package}@{version}/entrypoints',
        ...options
    });
};

/**
 * List stats periods
 * Returns a list of all periods for which some stats are available in descending order.
 * The `links` property of each period indicates which stats are available.
 *
 */
export const listStatsPeriods = <ThrowOnError extends boolean = false>(options?: Options<ListStatsPeriodsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListStatsPeriodsResponse, unknown, ThrowOnError>({
        url: '/v1/stats/periods',
        ...options
    });
};

/**
 * List top packages
 * Returns the most popular packages and their stats totals for the selected period.
 * More detailed stats can be accessed via the provided links.
 *
 */
export const listTopPackages = <ThrowOnError extends boolean = false>(options?: Options<ListTopPackagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTopPackagesResponse, ListTopPackagesError, ThrowOnError>({
        url: '/v1/stats/packages',
        ...options
    });
};

/**
 * Get repo stats
 * Returns daily usage stats for the repository.
 * Stats for specific versions can be accessed via the provided link.
 *
 */
export const getRepoStats = <ThrowOnError extends boolean = false>(options: Options<GetRepoStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoStatsResponse, GetRepoStatsError, ThrowOnError>({
        url: '/v1/stats/packages/gh/{user}/{repo}',
        ...options
    });
};

/**
 * List top repo versions
 * Returns daily usage stats for the most popular repository versions.
 * Stats for the individual version files can be accessed via the provided link.
 *
 */
export const listTopRepoVersions = <ThrowOnError extends boolean = false>(options: Options<ListTopRepoVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopRepoVersionsResponse, ListTopRepoVersionsError, ThrowOnError>({
        url: '/v1/stats/packages/gh/{user}/{repo}/versions',
        ...options
    });
};

/**
 * Get repo version stats
 * Returns daily usage stats for the specified repository version.
 * Stats for the individual version files can be accessed via the provided link.
 *
 */
export const getRepoVersionStats = <ThrowOnError extends boolean = false>(options: Options<GetRepoVersionStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoVersionStatsResponse, GetRepoVersionStatsError, ThrowOnError>({
        url: '/v1/stats/packages/gh/{user}/{repo}@{version}',
        ...options
    });
};

/**
 * List top repo version files
 * Returns daily usage stats for the most popular repository version files.
 *
 */
export const listTopRepoVersionFiles = <ThrowOnError extends boolean = false>(options: Options<ListTopRepoVersionFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopRepoVersionFilesResponse, ListTopRepoVersionFilesError, ThrowOnError>({
        url: '/v1/stats/packages/gh/{user}/{repo}@{version}/files',
        ...options
    });
};

/**
 * Get repo badge
 * Returns a badge with repo hits or rank.
 *
 */
export const getRepoBadge = <ThrowOnError extends boolean = false>(options: Options<GetRepoBadgeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoBadgeResponse, GetRepoBadgeError, ThrowOnError>({
        responseType: 'blob',
        url: '/v1/stats/packages/gh/{user}/{repo}/badge',
        ...options
    });
};

/**
 * Get package stats
 * Returns daily usage stats for the package.
 * Stats for specific versions can be accessed via the provided link.
 *
 */
export const getPackageStats = <ThrowOnError extends boolean = false>(options: Options<GetPackageStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageStatsResponse, GetPackageStatsError, ThrowOnError>({
        url: '/v1/stats/packages/npm/{package}',
        ...options
    });
};

/**
 * Get package stats (scoped)
 * Returns daily usage stats for the package.
 * Stats for specific versions can be accessed via the provided link.
 *
 */
export const getScopedPackageStats = <ThrowOnError extends boolean = false>(options: Options<GetScopedPackageStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScopedPackageStatsResponse, GetScopedPackageStatsError, ThrowOnError>({
        url: '/v1/stats/packages/npm/@{scope}/{package}',
        ...options
    });
};

/**
 * List top package versions
 * Returns daily usage stats for the most popular package versions.
 * Stats for the individual version files can be accessed via the provided link.
 *
 */
export const listTopPackageVersions = <ThrowOnError extends boolean = false>(options: Options<ListTopPackageVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopPackageVersionsResponse, ListTopPackageVersionsError, ThrowOnError>({
        url: '/v1/stats/packages/npm/{package}/versions',
        ...options
    });
};

/**
 * List top package versions (scoped)
 * Returns daily usage stats for the most popular package versions.
 * Stats for the individual version files can be accessed via the provided link.
 *
 */
export const listTopScopedPackageVersions = <ThrowOnError extends boolean = false>(options: Options<ListTopScopedPackageVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopScopedPackageVersionsResponse, ListTopScopedPackageVersionsError, ThrowOnError>({
        url: '/v1/stats/packages/npm/@{scope}/{package}/versions',
        ...options
    });
};

/**
 * Get package version stats
 * Returns daily usage stats for the specified package version.
 * Stats for the individual version files can be accessed via the provided link.
 *
 */
export const getPackageVersionStats = <ThrowOnError extends boolean = false>(options: Options<GetPackageVersionStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageVersionStatsResponse, GetPackageVersionStatsError, ThrowOnError>({
        url: '/v1/stats/packages/npm/{package}@{version}',
        ...options
    });
};

/**
 * Get package version stats (scoped)
 * Returns daily usage stats for the specified package version.
 * Stats for the individual version files can be accessed via the provided link.
 *
 */
export const getScopedPackageVersionStats = <ThrowOnError extends boolean = false>(options: Options<GetScopedPackageVersionStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScopedPackageVersionStatsResponse, GetScopedPackageVersionStatsError, ThrowOnError>({
        url: '/v1/stats/packages/npm/@{scope}/{package}@{version}',
        ...options
    });
};

/**
 * List top package version files
 * Returns daily usage stats for the most popular package version files.
 *
 */
export const listTopPackageVersionFiles = <ThrowOnError extends boolean = false>(options: Options<ListTopPackageVersionFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopPackageVersionFilesResponse, ListTopPackageVersionFilesError, ThrowOnError>({
        url: '/v1/stats/packages/npm/{package}@{version}/files',
        ...options
    });
};

/**
 * List top package version files (scoped)
 * Returns daily usage stats for the most popular package version files.
 *
 */
export const listTopScopedPackageVersionFiles = <ThrowOnError extends boolean = false>(options: Options<ListTopScopedPackageVersionFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopScopedPackageVersionFilesResponse, ListTopScopedPackageVersionFilesError, ThrowOnError>({
        url: '/v1/stats/packages/npm/@{scope}/{package}@{version}/files',
        ...options
    });
};

/**
 * Get package badge
 * Returns a badge with package hits or rank.
 *
 */
export const getPackageBadge = <ThrowOnError extends boolean = false>(options: Options<GetPackageBadgeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageBadgeResponse, GetPackageBadgeError, ThrowOnError>({
        responseType: 'blob',
        url: '/v1/stats/packages/npm/{package}/badge',
        ...options
    });
};

/**
 * Get package badge (scoped)
 * Returns a badge with package hits or rank.
 *
 */
export const getScopedPackageBadge = <ThrowOnError extends boolean = false>(options: Options<GetScopedPackageBadgeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScopedPackageBadgeResponse, GetScopedPackageBadgeError, ThrowOnError>({
        responseType: 'blob',
        url: '/v1/stats/packages/npm/@{scope}/{package}/badge',
        ...options
    });
};

/**
 * Get network-wide stats
 * Returns network-wide hits and bandwidth stats, with breakdowns by provider and date.
 * The list of providers may change over time. Only providers that served some traffic in the selected period are returned.
 * The provider codes are:
 * - `BN` Bunny
 * - `CF` Cloudflare
 * - `FY` Fastly
 * - `GC` Gcore
 * - `MX` StackPath
 * - `QT` Quantil
 *
 */
export const getNetworkStats = <ThrowOnError extends boolean = false>(options?: Options<GetNetworkStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNetworkStatsResponse, GetNetworkStatsError, ThrowOnError>({
        url: '/v1/stats/network',
        ...options
    });
};

/**
 * Get network-wide content stats
 * Returns network-wide hits and bandwidth stats, with breakdown by content type (packages, proxy endpoints, other) and date.
 *
 */
export const getNetworkContentStats = <ThrowOnError extends boolean = false>(options?: Options<GetNetworkContentStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNetworkContentStatsResponse, unknown, ThrowOnError>({
        url: '/v1/stats/network/content',
        ...options
    });
};

/**
 * Get network-wide country stats
 * Returns network-wide hits and bandwidth stats, with breakdown by country and provider.
 * The list of providers may change over time. Only providers that served some traffic in the selected period are returned.
 * The provider codes are:
 * - `BN` Bunny
 * - `CF` Cloudflare
 * - `FY` Fastly
 * - `GC` Gcore
 * - `MX` StackPath
 * - `QT` Quantil
 *
 */
export const getNetworkCountriesStats = <ThrowOnError extends boolean = false>(options?: Options<GetNetworkCountriesStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNetworkCountriesStatsResponse, GetNetworkCountriesStatsError, ThrowOnError>({
        url: '/v1/stats/network/countries',
        ...options
    });
};

/**
 * List top browsers (grouped versions)
 * Returns a list of the most popular browsers with stats combined across all versions and platforms.
 *
 */
export const listTopBrowsers = <ThrowOnError extends boolean = false>(options?: Options<ListTopBrowsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTopBrowsersResponse, ListTopBrowsersError, ThrowOnError>({
        url: '/v1/stats/browsers',
        ...options
    });
};

/**
 * List top browsers (separate versions)
 * Returns a list of the most popular browsers with each major version listed separately.
 *
 */
export const listTopBrowsersVersions = <ThrowOnError extends boolean = false>(options?: Options<ListTopBrowsersVersionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTopBrowsersVersionsResponse, ListTopBrowsersVersionsError, ThrowOnError>({
        url: '/v1/stats/browsers/versions',
        ...options
    });
};

/**
 * List top browser countries
 * Returns countries ordered by the market share of the specified browser.
 *
 */
export const listTopBrowserCountries = <ThrowOnError extends boolean = false>(options: Options<ListTopBrowserCountriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopBrowserCountriesResponse, ListTopBrowserCountriesError, ThrowOnError>({
        url: '/v1/stats/browsers/{name}/countries',
        ...options
    });
};

/**
 * List top browser platforms
 * Returns platforms ordered by their percentage share on all requests by the specified browser.
 *
 */
export const listTopBrowserPlatforms = <ThrowOnError extends boolean = false>(options: Options<ListTopBrowserPlatformsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopBrowserPlatformsResponse, ListTopBrowserPlatformsError, ThrowOnError>({
        url: '/v1/stats/browsers/{name}/platforms',
        ...options
    });
};

/**
 * List top browser versions
 * Returns the browser versions ordered by their market share.
 *
 */
export const listTopBrowserVersions = <ThrowOnError extends boolean = false>(options: Options<ListTopBrowserVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopBrowserVersionsResponse, ListTopBrowserVersionsError, ThrowOnError>({
        url: '/v1/stats/browsers/{name}/versions',
        ...options
    });
};

/**
 * List top browser version countries
 * Returns countries ordered by the market share of the specified browser version.
 *
 */
export const listTopBrowserVersionCountries = <ThrowOnError extends boolean = false>(options: Options<ListTopBrowserVersionCountriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopBrowserVersionCountriesResponse, ListTopBrowserVersionCountriesError, ThrowOnError>({
        url: '/v1/stats/browsers/{name}/versions/{version}/countries',
        ...options
    });
};

/**
 * List top platforms (grouped versions)
 * Returns a list of the most popular platforms with stats combined across all versions.
 *
 */
export const listTopPlatforms = <ThrowOnError extends boolean = false>(options?: Options<ListTopPlatformsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTopPlatformsResponse, ListTopPlatformsError, ThrowOnError>({
        url: '/v1/stats/platforms',
        ...options
    });
};

/**
 * List top platforms (separate versions)
 * Returns a list of the most popular platforms with each major version listed separately.
 *
 */
export const listTopPlatformsVersions = <ThrowOnError extends boolean = false>(options?: Options<ListTopPlatformsVersionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTopPlatformsVersionsResponse, ListTopPlatformsVersionsError, ThrowOnError>({
        url: '/v1/stats/platforms/versions',
        ...options
    });
};

/**
 * List top platform browsers
 * Returns browsers ordered by their percentage share on all requests on the specified platform.
 *
 */
export const listTopPlatformBrowsers = <ThrowOnError extends boolean = false>(options: Options<ListTopPlatformBrowsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopPlatformBrowsersResponse, ListTopPlatformBrowsersError, ThrowOnError>({
        url: '/v1/stats/platforms/{name}/browsers',
        ...options
    });
};

/**
 * List top platform countries
 * Returns countries ordered by the market share of the specified platform.
 *
 */
export const listTopPlatformCountries = <ThrowOnError extends boolean = false>(options: Options<ListTopPlatformCountriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopPlatformCountriesResponse, ListTopPlatformCountriesError, ThrowOnError>({
        url: '/v1/stats/platforms/{name}/countries',
        ...options
    });
};

/**
 * List top platform versions
 * Returns the platform versions ordered by their market share.
 *
 */
export const listTopPlatformVersions = <ThrowOnError extends boolean = false>(options: Options<ListTopPlatformVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopPlatformVersionsResponse, ListTopPlatformVersionsError, ThrowOnError>({
        url: '/v1/stats/platforms/{name}/versions',
        ...options
    });
};

/**
 * List top platform version countries
 * Returns countries ordered by the market share of the specified platform version.
 *
 */
export const listTopPlatformVersionCountries = <ThrowOnError extends boolean = false>(options: Options<ListTopPlatformVersionCountriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopPlatformVersionCountriesResponse, ListTopPlatformVersionCountriesError, ThrowOnError>({
        url: '/v1/stats/platforms/{name}/versions/{version}/countries',
        ...options
    });
};

/**
 * Get proxy stats
 * Returns daily usage stats for the proxy.
 *
 */
export const getProxyStats = <ThrowOnError extends boolean = false>(options: Options<GetProxyStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProxyStatsResponse, GetProxyStatsError, ThrowOnError>({
        url: '/v1/stats/proxies/{name}',
        ...options
    });
};

/**
 * List top proxy files
 * EXPERIMENTAL: This feature may change or be removed in the future.
 *
 * Returns stats for the most popular proxy files.
 *
 */
export const listTopProxyFiles = <ThrowOnError extends boolean = false>(options: Options<ListTopProxyFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTopProxyFilesResponse, ListTopProxyFilesError, ThrowOnError>({
        url: '/v1/stats/proxies/{name}/files',
        ...options
    });
};

/**
 * Get file metadata from file hash
 * Allows a reverse lookup of a file at the CDN by its hash. Works only for files which were accessed at least once.
 * If there are multiple files with the same hash, only the one which was accessed first via the CDN is returned.
 *
 */
export const lookupFileHash = <ThrowOnError extends boolean = false>(options: Options<LookupFileHashData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LookupFileHashResponse, LookupFileHashError, ThrowOnError>({
        url: '/v1/lookup/hash/{hash}',
        ...options
    });
};