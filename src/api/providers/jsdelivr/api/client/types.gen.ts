// This file is auto-generated by @hey-api/openapi-ts

export type PackageTypeName = {
    type: string;
    name: string;
};

export type PackageMetadata = PackageTypeName & {
    /**
     * An object mapping dist-tags to version numbers. Always empty for GitHub repos.
     */
    tags: {
        [key: string]: unknown;
    };
    /**
     * A list of all versions sorted in descending order.
     */
    versions: Array<{
        version: string;
        links: {
            /**
             * A link to metadata for this version.
             */
            self: string;
            /**
             * A link to entry point information for this version. Only for npm packages.
             */
            entrypoints?: string;
            /**
             * A link to stats for this version.
             */
            stats: string;
        };
    }>;
    links: {
        /**
         * A link to stats for this package.
         */
        stats: string;
    };
};

export type PackageResolved = PackageTypeName & {
    /**
     * The resolved version or `null` if there is no matching version.
     */
    version: string | null;
    links: {
        /**
         * A link to this resource.
         */
        self?: string;
        /**
         * A link to entry point information for this version. Only for npm packages.
         */
        entrypoints?: string;
        /**
         * A link to stats for this version.
         */
        stats?: string;
    };
};

export type PackageVersionMetadataTreeFiles = Array<{
    type: 'directory';
    /**
     * The directory name.
     */
    name: string;
    files: PackageVersionMetadataTreeFiles;
} | {
    type: 'file';
    /**
     * The filename.
     */
    name: string;
    /**
     * A base64-encoded sha256 of file contents.
     */
    hash: string;
    /**
     * The file size in bytes.
     */
    size: number;
}>;

export type PackageVersionMetadataFlatFiles = Array<{
    /**
     * An absolute file path within the package.
     */
    name: string;
    /**
     * A base64-encoded sha256 of file contents.
     */
    hash: string;
    /**
     * The file size in bytes.
     */
    size: number;
}>;

export type PackageVersionMetadata = PackageTypeName & {
    version: string;
    /**
     * A path to the default file in the package. `null` for GitHub repos or if no default file is set.
     */
    default: string | null;
    files: PackageVersionMetadataTreeFiles | PackageVersionMetadataFlatFiles;
    links?: {
        /**
         * A link to stats for this package version.
         */
        stats: string;
    };
};

export type PackageEntrypoint = {
    file: string;
    /**
     * A flag that indicates how the entry point was resolved:
     * - `false` based on trusted package metadata
     * - `true` based on our heuristics
     *
     */
    guessed: boolean;
};

export type PackageEntrypoints = {
    entrypoints?: {
        css?: PackageEntrypoint;
        js?: PackageEntrypoint;
    };
};

export type Periods = Array<{
    /**
     * The period date in `YYYY` or `YYYY-MM` format.
     */
    period: string;
    /**
     * The period type.
     */
    periodType: 's-month' | 's-quarter' | 's-year';
    /**
     * An object with links to all stats that are available in this period.
     */
    links: {
        /**
         * A link to browser stats for this period.
         */
        browsers?: string;
        /**
         * A link to network stats for this period.
         */
        network?: string;
        /**
         * A link to package stats for this period.
         */
        packages?: string;
        /**
         * A link to platform stats for this period.
         */
        platforms?: string;
        /**
         * A link to proxy stats for this period.
         */
        proxies?: string;
    };
}>;

/**
 * The number of hits in the selected period.
 */
export type HitsTotal = number;

/**
 * The bandwidth in bytes in the selected period.
 */
export type BandwidthTotal = number;

/**
 * The stats for previous period.
 * In case the periods have a different number of days (which happens with calendar months), the values are automatically adjusted.
 *
 */
export type PrevDescription = unknown;

export type StatsWithPrev = {
    hits: HitsTotal;
    bandwidth: BandwidthTotal;
    prev: PrevDescription & {
        hits: number;
        bandwidth: number;
    };
};

export type TopPackages = Array<PackageTypeName & StatsWithPrev & {
    links: {
        /**
         * A link to detailed stats for this package.
         */
        self: string;
        /**
         * A link to top versions stats for this package.
         */
        versions: string;
    };
}>;

export type NullableInteger = number | null;

/**
 * A breakdown of the hits by date. The object keys are in `YYYY-MM-DD` format.
 */
export type DateHitsStats = {
    [key: string]: number;
};

export type TotalDateHitsStats = {
    total: HitsTotal;
    dates: DateHitsStats;
};

/**
 * A breakdown of the bandwidth by date. The object keys are in `YYYY-MM-DD` format.
 */
export type DateBandwidthStats = {
    [key: string]: number;
};

export type TotalDateBandwidthStats = {
    total: BandwidthTotal;
    dates: DateBandwidthStats;
};

export type PackageStats = {
    hits: {
        /**
         * The number of packages with more hits. `null` if the package doesn't have any hits.
         */
        rank?: NullableInteger;
        /**
         * The number of packages of the same type (gh/npm) with more hits. `null` if the package doesn't have any hits.
         */
        typeRank?: NullableInteger;
    } & TotalDateHitsStats & {
        prev: PrevDescription & {
            rank: NullableInteger;
            typeRank: NullableInteger;
            total: number;
        };
    };
    bandwidth: {
        /**
         * The number of packages with more bandwidth. `null` if the package doesn't have any bandwidth.
         */
        rank?: NullableInteger;
        /**
         * The number of packages of the same type (gh/npm) with more bandwidth. `null` if the package doesn't have any bandwidth.
         */
        typeRank?: NullableInteger;
    } & TotalDateBandwidthStats & {
        prev: PrevDescription & {
            rank: NullableInteger;
            typeRank: NullableInteger;
            total: number;
        };
    };
    links: {
        /**
         * A link to top versions stats for this package.
         */
        versions: string;
    };
};

export type PackageVersionStats = {
    hits: TotalDateHitsStats;
    bandwidth: TotalDateBandwidthStats;
    links: {
        /**
         * A link to detailed stats for this version.
         */
        self: string;
        /**
         * A link to top files stats for this version.
         */
        files: string;
    };
};

export type TopPackageVersions = Array<{
    /**
     * Identifies whether this is a regular `version` (release), a `commit`, or a `branch`. Always `version` for npm packages.
     */
    type: 'branch' | 'commit' | 'version';
    /**
     * The version identifier.
     */
    version: string;
} & PackageVersionStats>;

export type TopPackageVersionFiles = Array<{
    /**
     * An absolute file path within the package.
     */
    name: string;
    hits: TotalDateHitsStats;
    bandwidth: TotalDateBandwidthStats;
}>;

export type BadgeType = 'hits' | 'rank' | 'type-rank';

export type BadgeStyle = 'square' | 'rounded';

/**
 * An ISO 3166-1 alpha-2 country code.
 */
export type CountryCode = string;

export type Provider = {
    /**
     * A two letter provider code.
     */
    code: string;
    /**
     * Provider name.
     */
    name: string;
};

/**
 * A breakdown of the hits by date. The object keys are in `YYYY-MM-DD` format.
 */
export type DateHitsStatsExtended = {
    [key: string]: {
        total: number;
    };
};

export type TotalDateHitsStatsExtended = {
    total: HitsTotal;
    dates: DateHitsStatsExtended;
};

export type PrevTotal = PrevDescription & {
    total: number;
};

export type PrevTotalWrapped = {
    prev: PrevTotal;
};

/**
 * A breakdown of the bandwidth by date. The object keys are in `YYYY-MM-DD` format.
 */
export type DateBandwidthStatsExtended = {
    [key: string]: {
        total: number;
    };
};

export type TotalDateBandwidthStatsExtended = {
    total: BandwidthTotal;
    dates: DateBandwidthStatsExtended;
};

export type NetworkStats = {
    /**
     * Network-wide hits stats.
     *
     */
    hits: {
        total: HitsTotal;
        /**
         * A breakdown of the hits by provider. The providers are sorted by hits in descending order.
         *
         */
        providers: Array<Provider & TotalDateHitsStatsExtended & PrevTotalWrapped>;
        prev: PrevTotal;
    };
    /**
     * Network-wide bandwidth stats.
     *
     */
    bandwidth: {
        total: BandwidthTotal;
        /**
         * A breakdown of the bandwidth by provider. The providers are sorted by bandwidth in descending order.
         *
         */
        providers: Array<Provider & TotalDateBandwidthStatsExtended & PrevTotalWrapped>;
        prev: PrevTotal;
    };
};

export type NetworkContentStats = {
    /**
     * Network-wide hits stats.
     *
     */
    hits: {
        total: number;
        packages: unknown & TotalDateHitsStatsExtended & PrevTotalWrapped;
        proxies: unknown & TotalDateHitsStatsExtended & PrevTotalWrapped;
        other: unknown & TotalDateHitsStatsExtended & PrevTotalWrapped;
        prev: PrevTotal;
    };
    /**
     * Network-wide bandwidth stats.
     *
     */
    bandwidth: {
        total: number;
        packages: unknown & TotalDateBandwidthStatsExtended & PrevTotalWrapped;
        proxies: unknown & TotalDateBandwidthStatsExtended & PrevTotalWrapped;
        other: unknown & TotalDateBandwidthStatsExtended & PrevTotalWrapped;
        prev: PrevTotal;
    };
};

export type Country = {
    code: CountryCode;
    /**
     * Country name.
     */
    name: string;
};

export type NetworkCountryStats = {
    /**
     * Network-wide hits stats.
     *
     */
    hits: {
        total: HitsTotal;
        /**
         * A breakdown of the hits by country. The countries are sorted by hits in descending order.
         *
         */
        countries: Array<Country & {
            total: number;
            /**
             * A breakdown of the country hits by provider. The providers are sorted by hits in descending order.
             *
             */
            providers: Array<Provider & {
                total: number;
            }>;
            prev: PrevTotal;
        }>;
        prev: PrevTotal;
    };
    /**
     * Network-wide bandwidth stats.
     *
     */
    bandwidth: {
        total: BandwidthTotal;
        /**
         * A breakdown of the bandwidth by country. The countries are sorted by bandwidth in descending order.
         *
         */
        countries: Array<Country & {
            total: number;
            /**
             * A breakdown of the country bandwidth by provider. The providers are sorted by bandwidth in descending order.
             *
             */
            providers: Array<Provider & {
                total: number;
            }>;
            prev: PrevTotal;
        }>;
        prev: PrevTotal;
    };
};

/**
 * Browser name.
 */
export type BrowserName = string;

export type NullableNumber = number | null;

/**
 * The stats for previous period.
 *
 */
export type PrevShare = {
    /**
     * `null` if there are no data for the previous period.
     */
    share: NullableNumber;
};

export type TopBrowsers = Array<{
    name: BrowserName;
    /**
     * Market share of the browser.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to country stats for this browser.
         */
        countries?: string;
        /**
         * A link to platform stats for this browser.
         */
        platforms: string;
        /**
         * A link to version stats for this browser.
         */
        versions: string;
    };
}>;

/**
 * Browser version. `Unknown` if the version couldn't be determined.
 */
export type BrowserVersion = string;

export type TopBrowsersVersions = Array<{
    name: BrowserName;
    version: BrowserVersion;
    /**
     * Market share of the browser version.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to country stats for this browser version.
         */
        countries?: string;
    };
}>;

export type TopBrowserCountries = Array<{
    country: CountryCode;
    /**
     * Market share of the browser within the country.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to browser stats for this country.
         */
        browsers: string;
        /**
         * A link to platform stats for this country.
         */
        platforms: string;
    };
}>;

/**
 * Platform name. `Other` if the platform couldn't be determined.
 */
export type PlatformName = string;

export type TopBrowserPlatforms = Array<{
    name: PlatformName;
    /**
     * Percentage share of the platform on all requests by the specified browser.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to browser stats for this platform.
         */
        browsers: string;
        /**
         * A link to country stats for this platform.
         */
        countries?: string;
        /**
         * A link to versions stats for this platform.
         */
        versions: string;
    };
}>;

export type TopBrowserVersions = Array<{
    version: BrowserVersion;
    /**
     * Market share of the browser version.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to country stats for this browser version.
         */
        countries?: string;
    };
}>;

export type TopBrowserVersionCountries = Array<{
    country: CountryCode;
    /**
     * Market share of the browser version within the country.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to browser stats for this country.
         */
        browsers: string;
        /**
         * A link to platform stats for this country.
         */
        platforms: string;
    };
}>;

export type TopPlatforms = Array<{
    name: PlatformName;
    /**
     * Market share of the platform.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to browser stats for this browser.
         */
        browsers: string;
        /**
         * A link to country stats for this platform.
         */
        countries?: string;
        /**
         * A link to version stats for this platform.
         */
        versions: string;
    };
}>;

/**
 * Platform version. `Unknown` if the version couldn't be determined.
 */
export type PlatformVersion = string;

/**
 * Platform version name. Empty for platforms that do not have named versions.
 */
export type PlatformVersionName = string;

export type TopPlatformsVersions = Array<{
    name: PlatformName;
    version: PlatformVersion;
    versionName: PlatformVersionName;
    /**
     * Market share of the platform version.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to country stats for this platform version.
         */
        countries?: string;
    };
}>;

export type TopPlatformBrowsers = Array<{
    name: BrowserName;
    /**
     * Percentage share of the browser on all requests on the specified platform.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to country stats for this platform.
         */
        countries?: string;
        /**
         * A link to platform stats for this browser.
         */
        platforms: string;
        /**
         * A link to versions stats for this platform.
         */
        versions: string;
    };
}>;

export type TopPlatformCountries = Array<{
    country: CountryCode;
    /**
     * Market share of the platform within the country.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to browser stats for this country.
         */
        browsers: string;
        /**
         * A link to platform stats for this country.
         */
        platforms: string;
    };
}>;

export type TopPlatformVersions = Array<{
    version: PlatformVersion;
    versionName: PlatformVersionName;
    /**
     * Market share of the platform version.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to country stats for this platform version.
         */
        countries?: string;
    };
}>;

export type TopPlatformVersionCountries = Array<{
    country: CountryCode;
    /**
     * Market share of the platform version within the country.
     */
    share: number;
    prev: PrevShare;
    links: {
        /**
         * A link to browser stats for this country.
         */
        browsers: string;
        /**
         * A link to platform stats for this country.
         */
        platforms: string;
    };
}>;

export type ProxyStats = {
    hits: TotalDateHitsStats & PrevTotalWrapped;
    bandwidth: TotalDateBandwidthStats & PrevTotalWrapped;
    links: {
        /**
         * A link to top files stats for this version.
         */
        files: string;
    };
};

export type TopProxyFiles = Array<{
    /**
     * An absolute file path within the proxy.
     */
    name: string;
    hits: {
        total: HitsTotal;
    };
    bandwidth: {
        total: BandwidthTotal;
    };
}>;

export type LookupHash = {
    type: string;
    name: string;
    version: string;
    file: string;
};

/**
 * A GitHub username.
 */
export type GhUser = string;

/**
 * A GitHub repository name.
 */
export type GhRepo = string;

/**
 * A valid semver version range or a tag.
 */
export type Specifier = string;

/**
 * An exact package version (not a version range or a tag)
 */
export type Version = string;

/**
 * A structure of the `files` array.
 */
export type Structure = 'tree' | 'flat';

/**
 * npm package name.
 */
export type Package = string;

/**
 * npm scope (username, organization).
 */
export type PackageScope = string;

/**
 * npm package name.
 */
export type PackageScoped = string;

/**
 * Include at most this many results.
 */
export type Limit = number;

/**
 * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
 * is provided with all responses that support pagination so you don't need to set this directly in most cases.
 *
 */
export type Page = number;

/**
 * The value to sort by.
 */
export type By = 'hits' | 'bandwidth';

/**
 * Filter for packages of this type.
 */
export type Type = 'gh' | 'npm';

/**
 * The time period for which the stats are returned. Can be one of the following:
 * 1. A floating period, which represents:
 * - `day` the past 1 day,
 * - `week` the past 7 days,
 * - `month` the past 30 days,
 * - `quarter` the past 90 days,
 * - `year` the past 365 days.
 * 2. A static period, which represents:
 * - `s-month` the last calendar month,
 * - `s-quarter` the last calendar quarter,
 * - `s-year` the last calendar year.
 * 3. A valid date in:
 * - `YYYY-MM` format for a specific month,
 * - `YYYY-Qq` format for a specific quarter,
 * - `YYYY` format for a specific year.
 *
 */
export type Period = string;

/**
 * What kind of value to show in the badge:
 * 1. `hits` number of hits in the selected period.
 * 2. `rank` rank of the package in the selected period.
 * 3. `type-rank` rank of the package in the selected period, within its type category (gh/npm).
 *
 */
export type BadgeType2 = BadgeType;

/**
 * The badge style. See the examples.
 *
 */
export type BadgeStyle2 = BadgeStyle;

/**
 * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
 */
export type Continent = 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';

/**
 * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
 */
export type Country2 = CountryCode;

/**
 * The time period for which the stats are returned. Can be one of the following:
 * 1. A static period, which represents:
 * - `s-month` the last calendar month,
 * - `s-quarter` the last calendar quarter,
 * - `s-year` the last calendar year.
 * 2. A valid date in:
 * - `YYYY-MM` format for a specific month,
 * - `YYYY-Qq` format for a specific quarter,
 * - `YYYY` format for a specific year.
 *
 */
export type PeriodStatic = string;

export type BrowserName2 = BrowserName;

export type BrowserVersion2 = BrowserVersion;

export type PlatformName2 = PlatformName;

export type PlatformVersion2 = PlatformVersion;

/**
 * The name of the proxy endpoint.
 */
export type ProxyName = string;

/**
 * A hex-encoded sha256 of file contents.
 */
export type Hash = string;

export type GetRepoMetadataData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
    };
    query?: never;
    url: '/v1/packages/gh/{user}/{repo}';
};

export type GetRepoMetadataErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetRepoMetadataError = GetRepoMetadataErrors[keyof GetRepoMetadataErrors];

export type GetRepoMetadataResponses = {
    /**
     * Success
     */
    200: PackageMetadata;
};

export type GetRepoMetadataResponse = GetRepoMetadataResponses[keyof GetRepoMetadataResponses];

export type GetResolvedRepoVersionData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
    };
    query?: {
        /**
         * A valid semver version range or a tag.
         */
        specifier?: string;
    };
    url: '/v1/packages/gh/{user}/{repo}/resolved';
};

export type GetResolvedRepoVersionErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetResolvedRepoVersionError = GetResolvedRepoVersionErrors[keyof GetResolvedRepoVersionErrors];

export type GetResolvedRepoVersionResponses = {
    /**
     * Success
     */
    200: PackageResolved;
};

export type GetResolvedRepoVersionResponse = GetResolvedRepoVersionResponses[keyof GetResolvedRepoVersionResponses];

export type GetRepoVersionMetadataData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * A structure of the `files` array.
         */
        structure?: 'tree' | 'flat';
    };
    url: '/v1/packages/gh/{user}/{repo}@{version}';
};

export type GetRepoVersionMetadataErrors = {
    /**
     * Forbidden
     */
    403: {
        status: number;
        message: string;
    };
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetRepoVersionMetadataError = GetRepoVersionMetadataErrors[keyof GetRepoVersionMetadataErrors];

export type GetRepoVersionMetadataResponses = {
    /**
     * Success
     */
    200: PackageVersionMetadata;
};

export type GetRepoVersionMetadataResponse = GetRepoVersionMetadataResponses[keyof GetRepoVersionMetadataResponses];

export type GetPackageMetadataData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
    };
    query?: never;
    url: '/v1/packages/npm/{package}';
};

export type GetPackageMetadataErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetPackageMetadataError = GetPackageMetadataErrors[keyof GetPackageMetadataErrors];

export type GetPackageMetadataResponses = {
    /**
     * Success
     */
    200: PackageMetadata;
};

export type GetPackageMetadataResponse = GetPackageMetadataResponses[keyof GetPackageMetadataResponses];

export type GetScopedPackageMetadataData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
    };
    query?: never;
    url: '/v1/packages/npm/@{scope}/{package}';
};

export type GetScopedPackageMetadataErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetScopedPackageMetadataError = GetScopedPackageMetadataErrors[keyof GetScopedPackageMetadataErrors];

export type GetScopedPackageMetadataResponses = {
    /**
     * Success
     */
    200: PackageMetadata;
};

export type GetScopedPackageMetadataResponse = GetScopedPackageMetadataResponses[keyof GetScopedPackageMetadataResponses];

export type GetResolvedPackageVersionData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * A valid semver version range or a tag.
         */
        specifier?: string;
    };
    url: '/v1/packages/npm/{package}/resolved';
};

export type GetResolvedPackageVersionErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetResolvedPackageVersionError = GetResolvedPackageVersionErrors[keyof GetResolvedPackageVersionErrors];

export type GetResolvedPackageVersionResponses = {
    /**
     * Success
     */
    200: PackageResolved;
};

export type GetResolvedPackageVersionResponse = GetResolvedPackageVersionResponses[keyof GetResolvedPackageVersionResponses];

export type GetResolvedScopedPackageVersionData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * A valid semver version range or a tag.
         */
        specifier?: string;
    };
    url: '/v1/packages/npm/@{scope}/{package}/resolved';
};

export type GetResolvedScopedPackageVersionErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetResolvedScopedPackageVersionError = GetResolvedScopedPackageVersionErrors[keyof GetResolvedScopedPackageVersionErrors];

export type GetResolvedScopedPackageVersionResponses = {
    /**
     * Success
     */
    200: PackageResolved;
};

export type GetResolvedScopedPackageVersionResponse = GetResolvedScopedPackageVersionResponses[keyof GetResolvedScopedPackageVersionResponses];

export type GetPackageVersionMetadataData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * A structure of the `files` array.
         */
        structure?: 'tree' | 'flat';
    };
    url: '/v1/packages/npm/{package}@{version}';
};

export type GetPackageVersionMetadataErrors = {
    /**
     * Forbidden
     */
    403: {
        status: number;
        message: string;
    };
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetPackageVersionMetadataError = GetPackageVersionMetadataErrors[keyof GetPackageVersionMetadataErrors];

export type GetPackageVersionMetadataResponses = {
    /**
     * Success
     */
    200: PackageVersionMetadata;
};

export type GetPackageVersionMetadataResponse = GetPackageVersionMetadataResponses[keyof GetPackageVersionMetadataResponses];

export type GetScopedPackageVersionMetadataData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * A structure of the `files` array.
         */
        structure?: 'tree' | 'flat';
    };
    url: '/v1/packages/npm/@{scope}/{package}@{version}';
};

export type GetScopedPackageVersionMetadataErrors = {
    /**
     * Forbidden
     */
    403: {
        status: number;
        message: string;
    };
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetScopedPackageVersionMetadataError = GetScopedPackageVersionMetadataErrors[keyof GetScopedPackageVersionMetadataErrors];

export type GetScopedPackageVersionMetadataResponses = {
    /**
     * Success
     */
    200: PackageVersionMetadata;
};

export type GetScopedPackageVersionMetadataResponse = GetScopedPackageVersionMetadataResponses[keyof GetScopedPackageVersionMetadataResponses];

export type GetPackageVersionEntrypointsData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: never;
    url: '/v1/packages/npm/{package}@{version}/entrypoints';
};

export type GetPackageVersionEntrypointsErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetPackageVersionEntrypointsError = GetPackageVersionEntrypointsErrors[keyof GetPackageVersionEntrypointsErrors];

export type GetPackageVersionEntrypointsResponses = {
    /**
     * Success
     */
    200: PackageEntrypoints;
};

export type GetPackageVersionEntrypointsResponse = GetPackageVersionEntrypointsResponses[keyof GetPackageVersionEntrypointsResponses];

export type GetScopedPackageVersionEntrypointsData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: never;
    url: '/v1/packages/npm/@{scope}/{package}@{version}/entrypoints';
};

export type GetScopedPackageVersionEntrypointsErrors = {
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type GetScopedPackageVersionEntrypointsError = GetScopedPackageVersionEntrypointsErrors[keyof GetScopedPackageVersionEntrypointsErrors];

export type GetScopedPackageVersionEntrypointsResponses = {
    /**
     * Success
     */
    200: PackageEntrypoints;
};

export type GetScopedPackageVersionEntrypointsResponse = GetScopedPackageVersionEntrypointsResponses[keyof GetScopedPackageVersionEntrypointsResponses];

export type ListStatsPeriodsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/periods';
};

export type ListStatsPeriodsResponses = {
    /**
     * Success
     */
    200: Periods;
};

export type ListStatsPeriodsResponse = ListStatsPeriodsResponses[keyof ListStatsPeriodsResponses];

export type ListTopPackagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * Filter for packages of this type.
         */
        type?: 'gh' | 'npm';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages';
};

export type ListTopPackagesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPackagesError = ListTopPackagesErrors[keyof ListTopPackagesErrors];

export type ListTopPackagesResponses = {
    /**
     * Success
     */
    200: TopPackages;
};

export type ListTopPackagesResponse = ListTopPackagesResponses[keyof ListTopPackagesResponses];

export type GetRepoStatsData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/packages/gh/{user}/{repo}';
};

export type GetRepoStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetRepoStatsError = GetRepoStatsErrors[keyof GetRepoStatsErrors];

export type GetRepoStatsResponses = {
    /**
     * Success
     */
    200: PackageStats;
};

export type GetRepoStatsResponse = GetRepoStatsResponses[keyof GetRepoStatsResponses];

export type ListTopRepoVersionsData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages/gh/{user}/{repo}/versions';
};

export type ListTopRepoVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopRepoVersionsError = ListTopRepoVersionsErrors[keyof ListTopRepoVersionsErrors];

export type ListTopRepoVersionsResponses = {
    /**
     * Success
     */
    200: TopPackageVersions;
};

export type ListTopRepoVersionsResponse = ListTopRepoVersionsResponses[keyof ListTopRepoVersionsResponses];

export type GetRepoVersionStatsData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/packages/gh/{user}/{repo}@{version}';
};

export type GetRepoVersionStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetRepoVersionStatsError = GetRepoVersionStatsErrors[keyof GetRepoVersionStatsErrors];

export type GetRepoVersionStatsResponses = {
    /**
     * Success
     */
    200: PackageVersionStats;
};

export type GetRepoVersionStatsResponse = GetRepoVersionStatsResponses[keyof GetRepoVersionStatsResponses];

export type ListTopRepoVersionFilesData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages/gh/{user}/{repo}@{version}/files';
};

export type ListTopRepoVersionFilesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopRepoVersionFilesError = ListTopRepoVersionFilesErrors[keyof ListTopRepoVersionFilesErrors];

export type ListTopRepoVersionFilesResponses = {
    /**
     * Success
     */
    200: TopPackageVersionFiles;
};

export type ListTopRepoVersionFilesResponse = ListTopRepoVersionFilesResponses[keyof ListTopRepoVersionFilesResponses];

export type GetRepoBadgeData = {
    body?: never;
    path: {
        /**
         * A GitHub username.
         */
        user: string;
        /**
         * A GitHub repository name.
         */
        repo: string;
    };
    query?: {
        /**
         * What kind of value to show in the badge:
         * 1. `hits` number of hits in the selected period.
         * 2. `rank` rank of the package in the selected period.
         * 3. `type-rank` rank of the package in the selected period, within its type category (gh/npm).
         *
         */
        type?: BadgeType;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * The badge style. See the examples.
         *
         */
        style?: BadgeStyle;
    };
    url: '/v1/stats/packages/gh/{user}/{repo}/badge';
};

export type GetRepoBadgeErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetRepoBadgeError = GetRepoBadgeErrors[keyof GetRepoBadgeErrors];

export type GetRepoBadgeResponses = {
    /**
     * Success
     */
    200: Blob | File;
};

export type GetRepoBadgeResponse = GetRepoBadgeResponses[keyof GetRepoBadgeResponses];

export type GetPackageStatsData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/packages/npm/{package}';
};

export type GetPackageStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetPackageStatsError = GetPackageStatsErrors[keyof GetPackageStatsErrors];

export type GetPackageStatsResponses = {
    /**
     * Success
     */
    200: PackageStats;
};

export type GetPackageStatsResponse = GetPackageStatsResponses[keyof GetPackageStatsResponses];

export type GetScopedPackageStatsData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/packages/npm/@{scope}/{package}';
};

export type GetScopedPackageStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetScopedPackageStatsError = GetScopedPackageStatsErrors[keyof GetScopedPackageStatsErrors];

export type GetScopedPackageStatsResponses = {
    /**
     * Success
     */
    200: PackageStats;
};

export type GetScopedPackageStatsResponse = GetScopedPackageStatsResponses[keyof GetScopedPackageStatsResponses];

export type ListTopPackageVersionsData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages/npm/{package}/versions';
};

export type ListTopPackageVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPackageVersionsError = ListTopPackageVersionsErrors[keyof ListTopPackageVersionsErrors];

export type ListTopPackageVersionsResponses = {
    /**
     * Success
     */
    200: TopPackageVersions;
};

export type ListTopPackageVersionsResponse = ListTopPackageVersionsResponses[keyof ListTopPackageVersionsResponses];

export type ListTopScopedPackageVersionsData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages/npm/@{scope}/{package}/versions';
};

export type ListTopScopedPackageVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopScopedPackageVersionsError = ListTopScopedPackageVersionsErrors[keyof ListTopScopedPackageVersionsErrors];

export type ListTopScopedPackageVersionsResponses = {
    /**
     * Success
     */
    200: TopPackageVersions;
};

export type ListTopScopedPackageVersionsResponse = ListTopScopedPackageVersionsResponses[keyof ListTopScopedPackageVersionsResponses];

export type GetPackageVersionStatsData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/packages/npm/{package}@{version}';
};

export type GetPackageVersionStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetPackageVersionStatsError = GetPackageVersionStatsErrors[keyof GetPackageVersionStatsErrors];

export type GetPackageVersionStatsResponses = {
    /**
     * Success
     */
    200: PackageVersionStats;
};

export type GetPackageVersionStatsResponse = GetPackageVersionStatsResponses[keyof GetPackageVersionStatsResponses];

export type GetScopedPackageVersionStatsData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/packages/npm/@{scope}/{package}@{version}';
};

export type GetScopedPackageVersionStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetScopedPackageVersionStatsError = GetScopedPackageVersionStatsErrors[keyof GetScopedPackageVersionStatsErrors];

export type GetScopedPackageVersionStatsResponses = {
    /**
     * Success
     */
    200: PackageVersionStats;
};

export type GetScopedPackageVersionStatsResponse = GetScopedPackageVersionStatsResponses[keyof GetScopedPackageVersionStatsResponses];

export type ListTopPackageVersionFilesData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages/npm/{package}@{version}/files';
};

export type ListTopPackageVersionFilesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPackageVersionFilesError = ListTopPackageVersionFilesErrors[keyof ListTopPackageVersionFilesErrors];

export type ListTopPackageVersionFilesResponses = {
    /**
     * Success
     */
    200: TopPackageVersionFiles;
};

export type ListTopPackageVersionFilesResponse = ListTopPackageVersionFilesResponses[keyof ListTopPackageVersionFilesResponses];

export type ListTopScopedPackageVersionFilesData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
        /**
         * An exact package version (not a version range or a tag)
         */
        version: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/packages/npm/@{scope}/{package}@{version}/files';
};

export type ListTopScopedPackageVersionFilesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopScopedPackageVersionFilesError = ListTopScopedPackageVersionFilesErrors[keyof ListTopScopedPackageVersionFilesErrors];

export type ListTopScopedPackageVersionFilesResponses = {
    /**
     * Success
     */
    200: TopPackageVersionFiles;
};

export type ListTopScopedPackageVersionFilesResponse = ListTopScopedPackageVersionFilesResponses[keyof ListTopScopedPackageVersionFilesResponses];

export type GetPackageBadgeData = {
    body?: never;
    path: {
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * What kind of value to show in the badge:
         * 1. `hits` number of hits in the selected period.
         * 2. `rank` rank of the package in the selected period.
         * 3. `type-rank` rank of the package in the selected period, within its type category (gh/npm).
         *
         */
        type?: BadgeType;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * The badge style. See the examples.
         *
         */
        style?: BadgeStyle;
    };
    url: '/v1/stats/packages/npm/{package}/badge';
};

export type GetPackageBadgeErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetPackageBadgeError = GetPackageBadgeErrors[keyof GetPackageBadgeErrors];

export type GetPackageBadgeResponses = {
    /**
     * Success
     */
    200: Blob | File;
};

export type GetPackageBadgeResponse = GetPackageBadgeResponses[keyof GetPackageBadgeResponses];

export type GetScopedPackageBadgeData = {
    body?: never;
    path: {
        /**
         * npm scope (username, organization).
         */
        scope: string;
        /**
         * npm package name.
         */
        package: string;
    };
    query?: {
        /**
         * What kind of value to show in the badge:
         * 1. `hits` number of hits in the selected period.
         * 2. `rank` rank of the package in the selected period.
         * 3. `type-rank` rank of the package in the selected period, within its type category (gh/npm).
         *
         */
        type?: BadgeType;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * The badge style. See the examples.
         *
         */
        style?: BadgeStyle;
    };
    url: '/v1/stats/packages/npm/@{scope}/{package}/badge';
};

export type GetScopedPackageBadgeErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetScopedPackageBadgeError = GetScopedPackageBadgeErrors[keyof GetScopedPackageBadgeErrors];

export type GetScopedPackageBadgeResponses = {
    /**
     * Success
     */
    200: Blob | File;
};

export type GetScopedPackageBadgeResponse = GetScopedPackageBadgeResponses[keyof GetScopedPackageBadgeResponses];

export type GetNetworkStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/network';
};

export type GetNetworkStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetNetworkStatsError = GetNetworkStatsErrors[keyof GetNetworkStatsErrors];

export type GetNetworkStatsResponses = {
    /**
     * Success
     */
    200: NetworkStats;
};

export type GetNetworkStatsResponse = GetNetworkStatsResponses[keyof GetNetworkStatsResponses];

export type GetNetworkContentStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/network/content';
};

export type GetNetworkContentStatsResponses = {
    /**
     * Success
     */
    200: NetworkContentStats;
};

export type GetNetworkContentStatsResponse = GetNetworkContentStatsResponses[keyof GetNetworkContentStatsResponses];

export type GetNetworkCountriesStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/network/countries';
};

export type GetNetworkCountriesStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetNetworkCountriesStatsError = GetNetworkCountriesStatsErrors[keyof GetNetworkCountriesStatsErrors];

export type GetNetworkCountriesStatsResponses = {
    /**
     * Success
     */
    200: NetworkCountryStats;
};

export type GetNetworkCountriesStatsResponse = GetNetworkCountriesStatsResponses[keyof GetNetworkCountriesStatsResponses];

export type ListTopBrowsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/browsers';
};

export type ListTopBrowsersErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopBrowsersError = ListTopBrowsersErrors[keyof ListTopBrowsersErrors];

export type ListTopBrowsersResponses = {
    /**
     * Success
     */
    200: TopBrowsers;
};

export type ListTopBrowsersResponse = ListTopBrowsersResponses[keyof ListTopBrowsersResponses];

export type ListTopBrowsersVersionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/browsers/versions';
};

export type ListTopBrowsersVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopBrowsersVersionsError = ListTopBrowsersVersionsErrors[keyof ListTopBrowsersVersionsErrors];

export type ListTopBrowsersVersionsResponses = {
    /**
     * Success
     */
    200: TopBrowsersVersions;
};

export type ListTopBrowsersVersionsResponse = ListTopBrowsersVersionsResponses[keyof ListTopBrowsersVersionsResponses];

export type ListTopBrowserCountriesData = {
    body?: never;
    path: {
        name: BrowserName;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/browsers/{name}/countries';
};

export type ListTopBrowserCountriesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopBrowserCountriesError = ListTopBrowserCountriesErrors[keyof ListTopBrowserCountriesErrors];

export type ListTopBrowserCountriesResponses = {
    /**
     * Success
     */
    200: TopBrowserCountries;
};

export type ListTopBrowserCountriesResponse = ListTopBrowserCountriesResponses[keyof ListTopBrowserCountriesResponses];

export type ListTopBrowserPlatformsData = {
    body?: never;
    path: {
        name: BrowserName;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/browsers/{name}/platforms';
};

export type ListTopBrowserPlatformsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopBrowserPlatformsError = ListTopBrowserPlatformsErrors[keyof ListTopBrowserPlatformsErrors];

export type ListTopBrowserPlatformsResponses = {
    /**
     * Success
     */
    200: TopBrowserPlatforms;
};

export type ListTopBrowserPlatformsResponse = ListTopBrowserPlatformsResponses[keyof ListTopBrowserPlatformsResponses];

export type ListTopBrowserVersionsData = {
    body?: never;
    path: {
        name: BrowserName;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/browsers/{name}/versions';
};

export type ListTopBrowserVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopBrowserVersionsError = ListTopBrowserVersionsErrors[keyof ListTopBrowserVersionsErrors];

export type ListTopBrowserVersionsResponses = {
    /**
     * Success
     */
    200: TopBrowserVersions;
};

export type ListTopBrowserVersionsResponse = ListTopBrowserVersionsResponses[keyof ListTopBrowserVersionsResponses];

export type ListTopBrowserVersionCountriesData = {
    body?: never;
    path: {
        name: BrowserName;
        version: BrowserVersion;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/browsers/{name}/versions/{version}/countries';
};

export type ListTopBrowserVersionCountriesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopBrowserVersionCountriesError = ListTopBrowserVersionCountriesErrors[keyof ListTopBrowserVersionCountriesErrors];

export type ListTopBrowserVersionCountriesResponses = {
    /**
     * Success
     */
    200: TopBrowserVersionCountries;
};

export type ListTopBrowserVersionCountriesResponse = ListTopBrowserVersionCountriesResponses[keyof ListTopBrowserVersionCountriesResponses];

export type ListTopPlatformsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/platforms';
};

export type ListTopPlatformsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPlatformsError = ListTopPlatformsErrors[keyof ListTopPlatformsErrors];

export type ListTopPlatformsResponses = {
    /**
     * Success
     */
    200: TopPlatforms;
};

export type ListTopPlatformsResponse = ListTopPlatformsResponses[keyof ListTopPlatformsResponses];

export type ListTopPlatformsVersionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/platforms/versions';
};

export type ListTopPlatformsVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPlatformsVersionsError = ListTopPlatformsVersionsErrors[keyof ListTopPlatformsVersionsErrors];

export type ListTopPlatformsVersionsResponses = {
    /**
     * Success
     */
    200: TopPlatformsVersions;
};

export type ListTopPlatformsVersionsResponse = ListTopPlatformsVersionsResponses[keyof ListTopPlatformsVersionsResponses];

export type ListTopPlatformBrowsersData = {
    body?: never;
    path: {
        name: PlatformName;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/platforms/{name}/browsers';
};

export type ListTopPlatformBrowsersErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPlatformBrowsersError = ListTopPlatformBrowsersErrors[keyof ListTopPlatformBrowsersErrors];

export type ListTopPlatformBrowsersResponses = {
    /**
     * Success
     */
    200: TopPlatformBrowsers;
};

export type ListTopPlatformBrowsersResponse = ListTopPlatformBrowsersResponses[keyof ListTopPlatformBrowsersResponses];

export type ListTopPlatformCountriesData = {
    body?: never;
    path: {
        name: PlatformName;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/platforms/{name}/countries';
};

export type ListTopPlatformCountriesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPlatformCountriesError = ListTopPlatformCountriesErrors[keyof ListTopPlatformCountriesErrors];

export type ListTopPlatformCountriesResponses = {
    /**
     * Success
     */
    200: TopPlatformCountries;
};

export type ListTopPlatformCountriesResponse = ListTopPlatformCountriesResponses[keyof ListTopPlatformCountriesResponses];

export type ListTopPlatformVersionsData = {
    body?: never;
    path: {
        name: PlatformName;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/platforms/{name}/versions';
};

export type ListTopPlatformVersionsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPlatformVersionsError = ListTopPlatformVersionsErrors[keyof ListTopPlatformVersionsErrors];

export type ListTopPlatformVersionsResponses = {
    /**
     * Success
     */
    200: TopPlatformVersions;
};

export type ListTopPlatformVersionsResponse = ListTopPlatformVersionsResponses[keyof ListTopPlatformVersionsResponses];

export type ListTopPlatformVersionCountriesData = {
    body?: never;
    path: {
        name: PlatformName;
        version: PlatformVersion;
    };
    query?: {
        /**
         * Include only data for this continent. Specified as a continent code in uppercase. Mutually exclusive with the `country` parameter.
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Include only data for this country. Specified as an ISO 3166-1 alpha-2 country code in uppercase. Mutually exclusive with the `continent` parameter.
         */
        country?: CountryCode;
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 2. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/platforms/{name}/versions/{version}/countries';
};

export type ListTopPlatformVersionCountriesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopPlatformVersionCountriesError = ListTopPlatformVersionCountriesErrors[keyof ListTopPlatformVersionCountriesErrors];

export type ListTopPlatformVersionCountriesResponses = {
    /**
     * Success
     */
    200: TopPlatformVersionCountries;
};

export type ListTopPlatformVersionCountriesResponse = ListTopPlatformVersionCountriesResponses[keyof ListTopPlatformVersionCountriesResponses];

export type GetProxyStatsData = {
    body?: never;
    path: {
        /**
         * The name of the proxy endpoint.
         */
        name: string;
    };
    query?: {
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
    };
    url: '/v1/stats/proxies/{name}';
};

export type GetProxyStatsErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type GetProxyStatsError = GetProxyStatsErrors[keyof GetProxyStatsErrors];

export type GetProxyStatsResponses = {
    /**
     * Success
     */
    200: ProxyStats;
};

export type GetProxyStatsResponse = GetProxyStatsResponses[keyof GetProxyStatsResponses];

export type ListTopProxyFilesData = {
    body?: never;
    path: {
        /**
         * The name of the proxy endpoint.
         */
        name: string;
    };
    query?: {
        /**
         * The value to sort by.
         */
        by?: 'hits' | 'bandwidth';
        /**
         * The time period for which the stats are returned. Can be one of the following:
         * 1. A floating period, which represents:
         * - `day` the past 1 day,
         * - `week` the past 7 days,
         * - `month` the past 30 days,
         * - `quarter` the past 90 days,
         * - `year` the past 365 days.
         * 2. A static period, which represents:
         * - `s-month` the last calendar month,
         * - `s-quarter` the last calendar quarter,
         * - `s-year` the last calendar year.
         * 3. A valid date in:
         * - `YYYY-MM` format for a specific month,
         * - `YYYY-Qq` format for a specific quarter,
         * - `YYYY` format for a specific year.
         *
         */
        period?: string;
        /**
         * Include at most this many results.
         */
        limit?: number;
        /**
         * Note that an [RFC 8288](https://www.rfc-editor.org/rfc/rfc8288.html) style `Link` header
         * is provided with all responses that support pagination so you don't need to set this directly in most cases.
         *
         */
        page?: number;
    };
    url: '/v1/stats/proxies/{name}/files';
};

export type ListTopProxyFilesErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
};

export type ListTopProxyFilesError = ListTopProxyFilesErrors[keyof ListTopProxyFilesErrors];

export type ListTopProxyFilesResponses = {
    /**
     * Success
     */
    200: TopProxyFiles;
};

export type ListTopProxyFilesResponse = ListTopProxyFilesResponses[keyof ListTopProxyFilesResponses];

export type LookupFileHashData = {
    body?: never;
    path: {
        /**
         * A hex-encoded sha256 of file contents.
         */
        hash: string;
    };
    query?: never;
    url: '/v1/lookup/hash/{hash}';
};

export type LookupFileHashErrors = {
    /**
     * Bad Request
     */
    400: {
        status: number;
        message: string;
        links?: {
            /**
             * A link to documentation for this endpoint.
             */
            documentation?: string;
        };
    };
    /**
     * Not Found
     */
    404: {
        status: number;
        message: string;
    };
};

export type LookupFileHashError = LookupFileHashErrors[keyof LookupFileHashErrors];

export type LookupFileHashResponses = {
    /**
     * Success
     */
    200: LookupHash;
};

export type LookupFileHashResponse = LookupFileHashResponses[keyof LookupFileHashResponses];

export type ClientOptions = {
    baseURL: 'https://data.jsdelivr.com' | (string & {});
};